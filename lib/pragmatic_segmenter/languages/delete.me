module PragmaticSegmenter
  module Languages
    module Deutsch
        class Abbreviation
          attr_reader :language
          def initialize(language:)
            @language = language
          end

          ABBR_DE = ['Ä', 'ä', 'adj', 'adm', 'adv', 'art', 'asst', 'b.a', 'b.s', 'bart', 'bldg', 'brig', 'bros', 'bse', 'buchst', 'bzgl', 'bzw', 'c.-à-d', 'ca', 'capt', 'chr', 'cmdr', 'co', 'col', 'comdr', 'con', 'corp', 'cpl', 'd.h', 'd.j', 'dergl', 'dgl', 'dkr', 'dr ', 'ens', 'etc', 'ev ', 'evtl', 'ff', 'g.g.a', 'g.u', 'gen', 'ggf', 'gov', 'hon', 'hosp', 'i.f', 'i.h.v', 'ii', 'iii', 'insp', 'iv', 'ix', 'jun', 'k.o', 'kath ', 'lfd', 'lt', 'ltd', 'm.e', 'maj', 'med', 'messrs', 'mio', 'mlle', 'mm', 'mme', 'mr', 'mrd', 'mrs', 'ms', 'msgr', 'mwst', 'no', 'nos', 'nr', 'o.ä', 'op', 'ord', 'pfc', 'ph', 'pp', 'prof', 'pvt', 'rep', 'reps', 'res', 'rev', 'rt', 's.p.a', 'sa', 'sen', 'sens', 'sfc', 'sgt', 'sog', 'sogen', 'spp', 'sr', 'st', 'std', 'str  ', 'supt', 'surg', 'u.a  ', 'u.e', 'u.s.w', 'u.u', 'u.ä', 'usf', 'usw', 'v', 'vgl', 'vi', 'vii', 'viii', 'vs', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xix', 'xv', 'xvi', 'xvii', 'xviii', 'xx', 'z.b ', 'z.t ', 'z.z', 'z.zt', 'zt', 'zzt']
          NUMBER_ABBR_DE = ['art', 'ca', 'no', 'nos', 'nr', 'pp']

          def all
            return [] unless language
            Abbreviation.const_defined?("ABBR_#{language.upcase}") ? Abbreviation.const_get("ABBR_#{language.upcase}") : []
          end

          def prefix
            return [] unless language
            Abbreviation.const_defined?("PREFIX_#{language.upcase}") ? Abbreviation.const_get("PREFIX_#{language.upcase}") : []
          end

          def number
            return [] unless language
            Abbreviation.const_defined?("NUMBER_ABBR_#{language.upcase}") ? Abbreviation.const_get("NUMBER_ABBR_#{language.upcase}") : []
          end
        end
      end
    end
  end
end
